<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stip.net.dao.UserWalletDao">
  <resultMap id="BaseResultMap" type="com.stip.net.entity.UserWallet">
    <id column="userWallet_wallet_id" jdbcType="VARCHAR" property="walletId" />
    <result column="userWallet_open_id" jdbcType="VARCHAR" property="openId" />
    <result column="userWallet_balance" jdbcType="VARCHAR" property="balance" />
    <result column="userWallet_update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="userWallet_remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    userWallet.wallet_id as userWallet_wallet_id, userWallet.open_id as userWallet_open_id, 
    userWallet.balance as userWallet_balance, userWallet.update_time as userWallet_update_time, 
    userWallet.remark as userWallet_remark
  </sql>
  <select id="selectByExample" parameterType="com.stip.net.example.UserWalletExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_wallet userWallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="fromRowNum != null and toRowNum >= 0">
      limit #{fromRowNum}, #{toRowNum}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_wallet userWallet
    where userWallet.wallet_id = #{walletId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user_wallet
    where wallet_id = #{walletId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.stip.net.example.UserWalletExample">
    delete userWallet from user_wallet userWallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.stip.net.entity.UserWallet">
    insert into user_wallet (wallet_id, open_id, balance, 
      update_time, remark)
    values (#{walletId,jdbcType=VARCHAR}, #{openId,jdbcType=VARCHAR}, #{balance,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.stip.net.entity.UserWallet">
    insert into user_wallet
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="walletId != null">
        wallet_id,
      </if>
      <if test="openId != null">
        open_id,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="walletId != null">
        #{walletId,jdbcType=VARCHAR},
      </if>
      <if test="openId != null">
        #{openId,jdbcType=VARCHAR},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.stip.net.example.UserWalletExample" resultType="java.lang.Integer">
    select count(*) from user_wallet userWallet
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user_wallet userWallet
    <set>
      <if test="record.walletId != null">
        userWallet.wallet_id = #{record.walletId,jdbcType=VARCHAR},
      </if>
      <if test="record.openId != null">
        userWallet.open_id = #{record.openId,jdbcType=VARCHAR},
      </if>
      <if test="record.balance != null">
        userWallet.balance = #{record.balance,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        userWallet.update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remark != null">
        userWallet.remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user_wallet userWallet
    set userWallet.wallet_id = #{record.walletId,jdbcType=VARCHAR},
      userWallet.open_id = #{record.openId,jdbcType=VARCHAR},
      userWallet.balance = #{record.balance,jdbcType=VARCHAR},
      userWallet.update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      userWallet.remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.stip.net.entity.UserWallet">
    update user_wallet
    <set>
      <if test="openId != null">
        open_id = #{openId,jdbcType=VARCHAR},
      </if>
      <if test="balance != null">
        balance = #{balance,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where wallet_id = #{walletId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.stip.net.entity.UserWallet">
    update user_wallet
    set open_id = #{openId,jdbcType=VARCHAR},
      balance = #{balance,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      remark = #{remark,jdbcType=VARCHAR}
    where wallet_id = #{walletId,jdbcType=VARCHAR}
  </update>
</mapper>