<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.stip.net.dao.RefundRecordsDao">
  <resultMap id="BaseResultMap" type="com.stip.net.entity.RefundRecords">
    <id column="refundRecords_refund_id" jdbcType="VARCHAR" property="refundId" />
    <result column="refundRecords_wx_refund_id" jdbcType="VARCHAR" property="wxRefundId" />
    <result column="refundRecords_nonce_str" jdbcType="VARCHAR" property="nonceStr" />
    <result column="refundRecords_out_refund_no" jdbcType="VARCHAR" property="outRefundNo" />
    <result column="refundRecords_out_trade_no" jdbcType="VARCHAR" property="outTradeNo" />
    <result column="refundRecords_refund_fee" jdbcType="VARCHAR" property="refundFee" />
    <result column="refundRecords_refund_desc" jdbcType="VARCHAR" property="refundDesc" />
    <result column="refundRecords_openid" jdbcType="VARCHAR" property="openid" />
    <result column="refundRecords_refund_status" jdbcType="VARCHAR" property="refundStatus" />
    <result column="refundRecords_remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    refundRecords.refund_id as refundRecords_refund_id, refundRecords.wx_refund_id as refundRecords_wx_refund_id, 
    refundRecords.nonce_str as refundRecords_nonce_str, refundRecords.out_refund_no as refundRecords_out_refund_no, 
    refundRecords.out_trade_no as refundRecords_out_trade_no, refundRecords.refund_fee as refundRecords_refund_fee, 
    refundRecords.refund_desc as refundRecords_refund_desc, refundRecords.openid as refundRecords_openid, 
    refundRecords.refund_status as refundRecords_refund_status, refundRecords.remark as refundRecords_remark
  </sql>
  <select id="selectByExample" parameterType="com.stip.net.example.RefundRecordsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from refund_records refundRecords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="fromRowNum != null and toRowNum >= 0">
      limit #{fromRowNum}, #{toRowNum}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from refund_records refundRecords
    where refundRecords.refund_id = #{refundId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from refund_records
    where refund_id = #{refundId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.stip.net.example.RefundRecordsExample">
    delete refundRecords from refund_records refundRecords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.stip.net.entity.RefundRecords">
    insert into refund_records (refund_id, wx_refund_id, nonce_str, 
      out_refund_no, out_trade_no, refund_fee, 
      refund_desc, openid, refund_status, 
      remark)
    values (#{refundId,jdbcType=VARCHAR}, #{wxRefundId,jdbcType=VARCHAR}, #{nonceStr,jdbcType=VARCHAR}, 
      #{outRefundNo,jdbcType=VARCHAR}, #{outTradeNo,jdbcType=VARCHAR}, #{refundFee,jdbcType=VARCHAR}, 
      #{refundDesc,jdbcType=VARCHAR}, #{openid,jdbcType=VARCHAR}, #{refundStatus,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.stip.net.entity.RefundRecords">
    insert into refund_records
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="refundId != null">
        refund_id,
      </if>
      <if test="wxRefundId != null">
        wx_refund_id,
      </if>
      <if test="nonceStr != null">
        nonce_str,
      </if>
      <if test="outRefundNo != null">
        out_refund_no,
      </if>
      <if test="outTradeNo != null">
        out_trade_no,
      </if>
      <if test="refundFee != null">
        refund_fee,
      </if>
      <if test="refundDesc != null">
        refund_desc,
      </if>
      <if test="openid != null">
        openid,
      </if>
      <if test="refundStatus != null">
        refund_status,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="refundId != null">
        #{refundId,jdbcType=VARCHAR},
      </if>
      <if test="wxRefundId != null">
        #{wxRefundId,jdbcType=VARCHAR},
      </if>
      <if test="nonceStr != null">
        #{nonceStr,jdbcType=VARCHAR},
      </if>
      <if test="outRefundNo != null">
        #{outRefundNo,jdbcType=VARCHAR},
      </if>
      <if test="outTradeNo != null">
        #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="refundFee != null">
        #{refundFee,jdbcType=VARCHAR},
      </if>
      <if test="refundDesc != null">
        #{refundDesc,jdbcType=VARCHAR},
      </if>
      <if test="openid != null">
        #{openid,jdbcType=VARCHAR},
      </if>
      <if test="refundStatus != null">
        #{refundStatus,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.stip.net.example.RefundRecordsExample" resultType="java.lang.Integer">
    select count(*) from refund_records refundRecords
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update refund_records refundRecords
    <set>
      <if test="record.refundId != null">
        refundRecords.refund_id = #{record.refundId,jdbcType=VARCHAR},
      </if>
      <if test="record.wxRefundId != null">
        refundRecords.wx_refund_id = #{record.wxRefundId,jdbcType=VARCHAR},
      </if>
      <if test="record.nonceStr != null">
        refundRecords.nonce_str = #{record.nonceStr,jdbcType=VARCHAR},
      </if>
      <if test="record.outRefundNo != null">
        refundRecords.out_refund_no = #{record.outRefundNo,jdbcType=VARCHAR},
      </if>
      <if test="record.outTradeNo != null">
        refundRecords.out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="record.refundFee != null">
        refundRecords.refund_fee = #{record.refundFee,jdbcType=VARCHAR},
      </if>
      <if test="record.refundDesc != null">
        refundRecords.refund_desc = #{record.refundDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.openid != null">
        refundRecords.openid = #{record.openid,jdbcType=VARCHAR},
      </if>
      <if test="record.refundStatus != null">
        refundRecords.refund_status = #{record.refundStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        refundRecords.remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update refund_records refundRecords
    set refundRecords.refund_id = #{record.refundId,jdbcType=VARCHAR},
      refundRecords.wx_refund_id = #{record.wxRefundId,jdbcType=VARCHAR},
      refundRecords.nonce_str = #{record.nonceStr,jdbcType=VARCHAR},
      refundRecords.out_refund_no = #{record.outRefundNo,jdbcType=VARCHAR},
      refundRecords.out_trade_no = #{record.outTradeNo,jdbcType=VARCHAR},
      refundRecords.refund_fee = #{record.refundFee,jdbcType=VARCHAR},
      refundRecords.refund_desc = #{record.refundDesc,jdbcType=VARCHAR},
      refundRecords.openid = #{record.openid,jdbcType=VARCHAR},
      refundRecords.refund_status = #{record.refundStatus,jdbcType=VARCHAR},
      refundRecords.remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.stip.net.entity.RefundRecords">
    update refund_records
    <set>
      <if test="wxRefundId != null">
        wx_refund_id = #{wxRefundId,jdbcType=VARCHAR},
      </if>
      <if test="nonceStr != null">
        nonce_str = #{nonceStr,jdbcType=VARCHAR},
      </if>
      <if test="outRefundNo != null">
        out_refund_no = #{outRefundNo,jdbcType=VARCHAR},
      </if>
      <if test="outTradeNo != null">
        out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      </if>
      <if test="refundFee != null">
        refund_fee = #{refundFee,jdbcType=VARCHAR},
      </if>
      <if test="refundDesc != null">
        refund_desc = #{refundDesc,jdbcType=VARCHAR},
      </if>
      <if test="openid != null">
        openid = #{openid,jdbcType=VARCHAR},
      </if>
      <if test="refundStatus != null">
        refund_status = #{refundStatus,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where refund_id = #{refundId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.stip.net.entity.RefundRecords">
    update refund_records
    set wx_refund_id = #{wxRefundId,jdbcType=VARCHAR},
      nonce_str = #{nonceStr,jdbcType=VARCHAR},
      out_refund_no = #{outRefundNo,jdbcType=VARCHAR},
      out_trade_no = #{outTradeNo,jdbcType=VARCHAR},
      refund_fee = #{refundFee,jdbcType=VARCHAR},
      refund_desc = #{refundDesc,jdbcType=VARCHAR},
      openid = #{openid,jdbcType=VARCHAR},
      refund_status = #{refundStatus,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where refund_id = #{refundId,jdbcType=VARCHAR}
  </update>
</mapper>